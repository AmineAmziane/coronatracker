{"version":3,"sources":["navbar/index.jsx","card/index.jsx","filter/index.jsx","chart/index.jsx","totalcard/index.jsx","App.js","serviceWorker.js","index.js","images/logo.png"],"names":["Navbar","className","src","logo","alt","Card","color","title","info","value","lastupdate","style","borderBottom","end","duration","separator","Filter","data","handleCountryChange","onChange","map","i","v","key","Chart","state","confirmed","recovered","deaths","reportDate","chartApi","a","fetch","dailyapi","json","daily","push","totalConfirmed","totalRecovered","total","setState","dataGlobal","width","labels","this","datasets","label","borderWidth","borderColor","fill","dataCountries","backgroundColor","props","options","display","text","region","legend","maintainAspectRatio","Component","TotalCard","contries","getApi","api","apic","apicontries","apiR","apireg","lastUpdate","countries","name","Date","toDateString","e","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.4bbd9fd1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport logo from \"./../images/logo.png\";\r\nimport \"./index.scss\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"logo\">\r\n        <img src={logo} alt=\"\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nimport CountUp from \"react-countup\";\r\nconst Card = ({ color, title, info, value, lastupdate }) => {\r\n  return (\r\n    <div className=\"card\" style={{ borderBottom: `10px solid ${color}` }}>\r\n      <span>{title}</span>\r\n      <h3>\r\n        <CountUp end={value} duration={2.75} separator=\",\" />\r\n      </h3>\r\n      <span>{lastupdate}</span>\r\n      <p>{info}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport \"./index.scss\";\r\nconst Filter = ({ data, handleCountryChange }) => {\r\n  return (\r\n    <div className=\"filter\">\r\n      <select onChange={handleCountryChange}>\r\n        <option value=\"global\">Global</option>\r\n        {data.map((i, v) => {\r\n          return (\r\n            <option value={i} key={v}>\r\n              {i}\r\n            </option>\r\n          );\r\n        })}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nclass Chart extends Component {\r\n  state = {\r\n    confirmed: 0,\r\n    recovered: 0,\r\n    deaths: 0,\r\n    reportDate: 0,\r\n  };\r\n  chartApi = async () => {\r\n    const dailyapi = await fetch(\"https://covid19.mathdro.id/api/daily\");\r\n    const daily = await dailyapi.json();\r\n    let confirmed = [];\r\n    let recovered = [];\r\n    let deaths = [];\r\n    let reportDate = [];\r\n    daily.map((i) => {\r\n      confirmed.push(i.totalConfirmed);\r\n      recovered.push(i.totalRecovered);\r\n      deaths.push(i.deaths.total);\r\n      reportDate.push(i.reportDate);\r\n      return true;\r\n    });\r\n    this.setState({\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      reportDate,\r\n    });\r\n  };\r\n  render() {\r\n    const dataGlobal = {\r\n      width: 500,\r\n      labels: this.state.reportDate,\r\n      datasets: [\r\n        {\r\n          label: \"Infected\",\r\n          data: this.state.confirmed,\r\n          borderWidth: 1,\r\n          borderColor: \"#0000FF\",\r\n          fill: true,\r\n        },\r\n        {\r\n          label: \"Deaths\",\r\n          data: this.state.deaths,\r\n          borderWidth: 1,\r\n          borderColor: \"#FF0000\",\r\n          fill: true,\r\n        },\r\n      ],\r\n    };\r\n    const dataCountries = {\r\n      labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n      datasets: [\r\n        {\r\n          label: \"\",\r\n          backgroundColor: [\r\n            \"rgba(255,0,0,0.5)\",\r\n            \"rgba(0,0,255,0.5)\",\r\n            \"rgba(0,255,0,0.5)\",\r\n          ],\r\n          data: [this.props.total[0], this.props.total[1], this.props.total[2]],\r\n        },\r\n      ],\r\n    };\r\n    const options = {\r\n      title: {\r\n        display: true,\r\n        text: \"Current State in \" + this.props.region,\r\n      },\r\n      legend: { display: false },\r\n      maintainAspectRatio: false,\r\n    };\r\n    return this.props.region === \"global\" ? (\r\n      <Line data={dataGlobal} />\r\n    ) : (\r\n      <Bar data={dataCountries} options={options} />\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    this.chartApi();\r\n  }\r\n}\r\nexport default Chart;\r\n","import React, { Component } from \"react\";\r\nimport \"./index.scss\";\r\nimport Card from \"./../card/\";\r\nimport Filter from \"./../filter/\";\r\nimport Chart from \"./../chart/\";\r\n\r\nclass TotalCard extends Component {\r\n  state = {\r\n    value: [0, 0, 0],\r\n    lastupdate: \"\",\r\n    contries: [],\r\n    region: \"global\",\r\n  };\r\n  getApi = async () => {\r\n    const api = await fetch(\"https://covid19.mathdro.id/api\");\r\n    const data = await api.json();\r\n    const apic = await fetch(\"https://covid19.mathdro.id/api/countries\");\r\n    const apicontries = await apic.json();\r\n    let region = this.state.region;\r\n    let confirmed;\r\n    let recovered;\r\n    let deaths;\r\n    if (region === \"global\") {\r\n      confirmed = data.confirmed.value;\r\n      recovered = data.recovered.value;\r\n      deaths = data.deaths.value;\r\n    } else {\r\n      const apiR = await fetch(\r\n        `https://covid19.mathdro.id/api/countries/${region}`\r\n      );\r\n      const apireg = await apiR.json();\r\n      confirmed = apireg.confirmed.value;\r\n      recovered = apireg.recovered.value;\r\n      deaths = apireg.deaths.value;\r\n    }\r\n    const lastUpdate = data.lastUpdate;\r\n    let value = [confirmed, recovered, deaths];\r\n    let contries = [];\r\n    apicontries.countries.map((i) => {\r\n      return contries.push(i.name);\r\n    });\r\n    this.setState({\r\n      value: value,\r\n      lastupdate: new Date(lastUpdate).toDateString(),\r\n      contries: contries,\r\n    });\r\n  };\r\n  handleCountryChange = (e) => {\r\n    this.setState({ region: e.target.value });\r\n    this.getApi();\r\n  };\r\n  render() {\r\n    const color = [\r\n      \"rgba(255,0,0,0.5)\",\r\n      \"rgba(0,0,255,0.5)\",\r\n      \"rgba(0,255,0,0.5)\",\r\n    ];\r\n    const title = [\"Infected\", \"Recovered\", \"Death\"];\r\n    const info = [\r\n      \"Number of active cases of COVID-19.\",\r\n      \"Number of recoveries from COVID-19.\",\r\n      \"Number of deaths caused COVID-19.\",\r\n    ];\r\n    const num = [1, 2, 3];\r\n\r\n    return (\r\n      <>\r\n        <div className=\"totalcard\">\r\n          {num.map((i, v) => {\r\n            return (\r\n              <Card\r\n                key={v}\r\n                title={title[v]}\r\n                info={info[v]}\r\n                value={this.state.value[v]}\r\n                lastupdate={this.state.lastupdate}\r\n                color={color[v]}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n        <Filter\r\n          data={this.state.contries}\r\n          handleCountryChange={this.handleCountryChange}\r\n        />\r\n        <div className=\"chartCard\">\r\n          <Chart region={this.state.region} total={this.state.value} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    this.getApi();\r\n  }\r\n}\r\n\r\nexport default TotalCard;\r\n","import React from \"react\";\nimport Navbar from \"./navbar/\";\nimport TotalCard from \"./totalcard/\";\nimport \"./App.css\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <TotalCard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.d7265326.png\";"],"sourceRoot":""}